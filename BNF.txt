<program> = [<package declaration>] [{<import declaration>}] [{<class>}];
(* problem: interfaces? *)

<package declaration> = "package" <identifier>;

<class> = <class modifiers> "class" <identifier> [<extends>] [<implements>] '{'<class body>'}';

<class modifiers> = [<access_modifier>] {<class modifier>};
<access modifier> = "public" | "private" | "protected";
<class modifier> = "abstract" | "static" | "final" | "strictfp";
(* problem: class cannot be both abstract and final *)
(* problem: access modifier and class modifiers can be in any order*)

<extends> = "extends" <identifier>;
<implements> = "implements" <identifier> {',' <identifier>};
(* Can these be in opposite orders? *)

<class body> = {<class body statement>};

<class body statement> = <field declaration> | <method declaration> | <constructor declaration>;
(* See: Static initializer *)

<field modifier> = public | protected | private | static | final | transient | volatile;
(* Some of these conflict? *)

<type> = <primitive type> | <nonprimitive type>;
<primitive type> = boolean | byte | char | short | int | long | float | double;
<nonprimitive type> = <identifier>;
