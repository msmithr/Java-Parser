<program> = [<package declaration>] [{<import declaration>}] [{<class>}];
(* problem: interfaces? *)

<package declaration> = "package" <identifier>;

<class> = <class modifiers> "class" <identifier>
[<extends>] [<implements>] '{'<class body>'}';

<class modifiers> = [<access modifier>] {<class modifier>};
<access modifier> = "public" | "private" | "protected";
<class modifier> = "abstract" | "static" | "final" | "strictfp";
(* problem: class cannot be both abstract and final *)
(* problem: access modifier and class modifiers can be in any order*)

<extends> = "extends" <identifier>;
<implements> = "implements" <identifier> {',' <identifier>};

<class body> = {<class body statement>};

<class body statement> = <field declaration> | <method declaration>
| <constructor declaration> | <static initializer>;
(*Todo: Constructor declaration*)

<field declaration> = {<field modifiers>} <type>
<identifier> [ = <expr>] {, <identifier> [ = <expr>]}';';

<method declaration> = <method modifiers> (<type>|"void") <identifier>
'(' <parameters> ')' '{' <method body> '}';
(*Todo: throws*)

<static initializer> = "static" <block>;



<field modifier> = public | protected | private | static | final | transient | volatile;
(* Some of these conflict? *)

<parameters> = [<type> <identifier>] {, <type> <identifier>};

<type> = <primitive type> | <nonprimitive type>;
<primitive type> = boolean | byte | char | short | int | long | float | double;
<nonprimitive type> = <identifier> | <type>'[]';
