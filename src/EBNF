(*--CLASS DECLARATION--*)
<class> = <class modifiers> "class" <identifier>
[<extends>] [<implements>] <class body>;

    <extends> = "extends" <identifier>;
    <implements> = "implements" <identifier> {',' <identifier>};

    <class modifiers> = {<access modifier> | <class modifier>};
    <access modifier> = "public" | "private" | "protected";
    <class modifier> = "abstract" | "static" | "final" | "strictfp";
    (* problem: class cannot be both abstract and final *)
    (* problem: access modifier and class modifiers can be in any order*)

(*--CLASS BODY DECLARATIONS--*)
<class body> = {<class body statement>};

<class body statement> = <field declaration> | <method declaration>
| <constructor declaration> | <static initializer>;

    <field declaration> = {<field modifier>} <type> <variable declarators>;

        <field modifier> = public | protected | private | static | final | transient | volatile;
        (* Some of these conflict? *)

    <method declaration> = <method modifiers> (<type>|"void") <identifier>
    '(' <parameters> ')' [<throws>] [<block>];

    <constructor declaration> = <access modifier> <identifier>
    '(' <parameters> ')' [<throws>] '{' <constructor body> '}';

        <parameters> = [<type> <variable identifier> {, <type> <variable identifier>}];
        <throws> = throws <identifier> {, <identifer>};

    <static initializer> = "static" <block>;


(*--BLOCK STATEMENTS--*)
<block> = '{'{<block statement>}'}';
<block statement> = <local variable declaration> | <statement>;

<local variable declaration> = <type> <variable declarators>;

<statement> = <if statement> | <while loop> | <for loop> | <block>
            | <do while> | <switch case> | <return> | <break> | <continue>
            | <throw statement> | <try> | <synchronized>;

    <if statement> = "if" '(' <expression> ')' <statement> [else <statement>];

    <while loop> = "while" (<expression>) <statement>;

    <for loop> = "for" '(' [<for init>]';' [<expression>]';' [<for update>]  ')' <statement>;

        <for init> = <expression list> | <local variable declaration>;
        <for update> = <expression list>;
        <expression list> = <expression> {, <expression>};

    <do while> = "do" <statement> "while" '(' <expression> ')';

    <throw statement> = "throw" <expression> ';';
    <return> = "return" [<expression>]';';
    <break> = "break" [<identifier>]';';
    <continue> = "continue" [<identifier>]';';

    <synchronized> = "synchronized" '(' <expression> ')' <block>;

    <try> = "try" <block> <catches> ["finally" <block>];

        <catches> = "catch" '(' <type> <variable identifier> ')' <block>
            {"catch" '(' <type> <variable identifier> ')' <block>};
        (*is this correct?*)

(*Modifiers, Declarators, Types*)
<variable decalarators> = <variable identifier> [ = (<expression> | <array init>) ]
    {, <variable identifier> [ = (<expression> | <array init>)]};

<type> = <primitive type> | <reference type>;
<primitive type> = boolean | byte | char | short | int | long | float | double;
<reference type> = <identifier> | <type>'[]';

<variable id> = <identifier>{'[]'};
(*array init is currently undefined*)
