/**
 * Enum for valid token types, used for lexical analyzer and recursive desecent parser for the Java
 * programming language class definition
 * 
 * @author Michael Smith and Nathan Jean
 */

package types;

public enum Token {
	
	IDENTIFIER,
	INT_LITERAL,
	STRING_LITERAL,
	CHAR_LITERAL,

	// keywords
	KEYWORD_CLASS,
	KEYWORD_EXTENDS,
	KEYWORD_IMPLEMENTS,
	// KEYWORD_INTERFACE
	KEYWORD_IF,
	KEYWORD_ELSE,
	KEYWORD_WHILE,
	KEYWORD_DO,
	KEYWORD_FOR,
	KEYWORD_SWITCH,
	KEYWORD_CASE,
	KEYWORD_DEFAULT,
	KEYWORD_RETURN,
	KEYWORD_BREAK,
	KEYWORD_CONTINUE,
	KEYWORD_THROW,
	KEYWORD_THROWS,
	KEYWORD_TRY,
	KEYWORD_CATCH,
	KEYWORD_FINALLY,
	KEYWORD_VOID,
	KEYWORD_ASSERT,
	//KEYWORD_ENUM,
	KEYWORD_IMPORT, 	
	KEYWORD_INSTANCEOF,
	KEYWORD_NEW,
	KEYWORD_PACKAGE,
	KEYWORD_SUPER,
	KEYWORD_THIS,
	KEYWORD_NULL,
	KEYWORD_TRUE,
	KEYWORD_FALSE,
	
	MODIFIER,
	PRIMITIVE_TYPE,


	// brackets
	LEFT_PAREN,
	RIGHT_PAREN,
	LEFT_BRACE,
	RIGHT_BRACE,
	LEFT_BRACKET,
	RIGHT_BRACKET,
	LEFT_ANGLEBRACKET,// <
	RIGHT_ANGLEBRACKET,// >
	DOUBLE_QUOTE,// "
	SINGLE_QUOTE,// '


	SEMICOLON,
	COMMA,
	COLON,
	DOT,

	// operators and other symbols
	//PLUS,// +
	//MINUS,// -
	BACKSLASH,// /
	//FORWARDSLASH,// \
	//MODULO,// %
	//AT,// @
	//EXCLAIMATION_POINT,// ! (aka NOT, or BANG)
	BITWISE_OR,// |
	BITWISE_AND, // &
	BITWISE_XOR, // ^
	ASSIGNMENT_OPERATOR,// =
	QUESTION_MARK,// ?
	
	INFIX_OPERATOR,
	PREFIX_OPERATOR,
	OPERATOR_PLUS,
	OPERATOR_MINUS,
	OPERATOR_INCREMENT,
	OPERATOR_DECREMENT,



}
