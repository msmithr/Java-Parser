<qualified_identifier> = <identifier> {"." <identifier>};

<program> = ["package" <qualified_identifier>] ";" {<import>} <class>;
<import> = "import" ["static"] <identifier> {"." <identifier>} [".*"] ";" ;

<class> = {<modifier>} <class declaration>;
<class_declaration> = "class" <identifier> [<type_arguments>][<extends>] [<implements>] <class_body>;

<modifier> = "public"
    | "protected"
    | "private"
    | "static"
    | "abstract"
    | "final"
    | "native"
    | "synchronized"
    | "transient"
    | "volatile"
    | "strictfp"
	| "@" <identifier>;

<primitive_type> = "boolean"
    | "byte"
    | "char"
    | "short"
    | "int"
    | "long"
    | "float"
    | "double";

<extends> = "extends" <identifier>;
<implements> = "implements" <identifier> {',' <identifier>};

<class_body> = '{' {<class body statement>} '}';

<class_body_statement> = ';' | {<modifier>} <class_body_declaration> | ["static"] <block>;

<class_body_declaration> = <class_declaration>
    | "void" <identifier> <method_declaration>
    | <identifier> <method_declaration>
    | <type> <identifier> <method_declaration>
    | <type> <identifier> <field_declaration> ";";

<field_declaration> = {"[]"} ["=" <variable_init>] <variable_declarators_half>;

<variable_declarators> = <variable_declarator> <variable_declarators_half>;
<variable_declarator> = <identifier> {'[]'} ["=" <variable_init>];
<variable_declarators_half> = {"," <variable_declarator>};

<method_declaration> = <parameters> ["throws" <qualified_identifier> {"," <qualified_identifier>}] (<block> | ";");

<parameters> = "(" [<parameter> {, <parameter>}] ")";
<parameter> = {<modifier>} <type> <identifier>{"[]"};

<block> = '{' {<block_statement> }"}";

<block_statement> = {<modifier>} (
	<class_declaration>
	| <local_variable_declaration>
	| <identifier> ":" <statement>
	| <identifier> [<type_arguments>] {"." <identifier> [<type_arguments>]} {"[]"} <variable_declarators>
    | <identifier> {"." <identifier>} <expression_from_block>
);

<expression_from_block> = ("." etc | <arguments> ) [<assignment_operator> <expression1>] ";" ;
(*FIX THIS*)
(*Also, selectors, etc, after arguments*)

<local_variable_declaration> = <type> <variable_declarators>;

<type> = <primitive_type> {"[]"}
    | <identifier> <type_half>;

<type_half> = [<type_arguments>] {"." <identifier> [type_arguments]}  {"[]"};

<type_arguments> = "<" <type_argument> {"," <type_argument>} ">";
<type_argument> = <type> | "?" [ ("super" | "extends") <type>];

<variable_init> = <expression> | <array_init>;
<array_init> = "{" [<variable_init> {"," <variable_init>}] "}";

<statement> = "if" <paren_expression> ["else" <statement>]
    | "while" <paren_expression> <statement>
    | "do" <statement> "while" <paren_expression> ";"
    | "for" "(" [{<modifier>} <type> <identifier> {"[]"}] ["=" <variable_init>] <for_arguments> ")" <statement>
    | "assert" <expression> [:<expression>] ";"
    | "switch" <paren_expression> "{" <cases> "}"
    | "return" [<expression>] ";"
    | "break" [<identifier>] ";"
    | "continue" [<identifier>] ";"
    | "throw" <expression> ";"
    | "try" <block> [<catches>] ["finally" <block>]
    | "synchronized" <paren_expression> <block>
    | <block>
    | ";"
    | <identifier> ":" <statement>
    | <expression>;

<cases> = { ("case" (<identifier> | <expression>) | "default") ":" {<block_statement>} };

<catches> = <catch> {<catch>};
<catch> = "catch" "(" {<modifier>} <qualified_identifier> <identifier> ")" <block>;

<for_arguments> = ";" [<expression>] ";" <expression> {"," <expression>}
	| ":" <expression>;

<expression> = <expression1> [<assignment_operator> <expression1>];
<expression1> = <expression2> ["?" <expression> ":" <expression1>];
<expression2> = <expression3> [("instanceOf" <type> | {<infix_operator> <expression3>})];
<expression3> = <prefix_operator> <expression3>
    (* | "(" (<expression> | <type>) ")" <expression3> *) (* correct ebnf *)
    | "(" <type> ")" <expression3> (*implemented ebnf *)
    | <expression_unit> {<selector>} {<postfix_operator>};

<expression_half> = {"." <identifier>} [<identifier_rest>] <assignment_operator> <expression1>;
(*This is not fully implemented*)

<expression_unit> = <literal>
	| <paren_expression>
	| "this" [<arguments>]
	| "super" (<arguments> | "." <identifier> [<arguments>])
	| "new" <allocator>
	| (*???*)
	| <identifier> [<identifier_rest>]
	| <primitive_type> {"[]"} "." "class"
	| "void" "." "class";

<selector> = "." (
    <identifier> [<arguments>]
    | "this"
    | "super" (<arguments> | "." <identifier> [<arguments>])
    | "new" [<type_arguments>] (*Inner Creator*)
    );

<allocator> = <identifier> [<type_arguments>] {"." <identifier> [<type_arguments>]} (<class_allocator> | <array_allocator>);
<class_allocator> = <arguments> [<class_body>];
<array_allocator> = "[]" {"[]"} <array_init>
    | "[" <expression> "]" {"[" <expression> "]"} {"[]"};

<inner_allocator> = <identifier> [<type_arguments>] <class_allocator>;

<identifier_rest> = {"." <identifier>} (
    <arguments>
    | "." ("class" | "this" | "super" <arguments> | "new" [<type_arguments>] (*Inner Creator*))
    | (*?*);


<paren_expression> = "(" <expression> ")";

<arguments> = "(" [<expression> {"," <expression>}] ")";

<literal> = <int_lit>
	| <int_lit> "." <int_lit>
	| '<identifier>'
	| "<identifier>"
	| ("true" | "false");
	| "null";

<assignment_operator> = <ASSIGNMENT_OPERATOR>
    | ">>="
    | "<<="
    | ">>>=";

<ASSIGNMENT_OPERATOR> = "="
    | "+="
    | "-="
    | "*="
    | "/="
    | "&="
    | "|="
    | "^="
    | "%=";

<infix_operator> = <INFIX_OPERATOR>
	| "+"
	| "-"
    | ">"
    | ">="
    | ">>"
    | ">>>"
    | "<"
    | "<="
    | "<<";

<INFIX_OPERATOR> = "||"
    | "&&"
    | "|"
    | "^"
    | "&"
    | "=="
    | "!="
    | "*"
    | "/"
    | "%";

<prefix_operator> = <PREFIX_OPERATOR>
	| "+"
	| "-"
	| "++"
	| "--";

<PREFIX_OPERATOR> = "!"
    | "~";

<postfix_operator> = "++"
	| "--";
